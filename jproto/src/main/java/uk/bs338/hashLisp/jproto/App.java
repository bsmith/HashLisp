/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uk.bs338.hashLisp.jproto;

import uk.bs338.hashLisp.jproto.eval.LazyEvaluator;
import uk.bs338.hashLisp.jproto.hons.HonsCell;
import uk.bs338.hashLisp.jproto.hons.HonsHeap;
import uk.bs338.hashLisp.jproto.hons.HonsValue;
import uk.bs338.hashLisp.jproto.reader.CharClassifier;
import uk.bs338.hashLisp.jproto.reader.Reader;
import uk.bs338.hashLisp.jproto.reader.Tokeniser;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

import static uk.bs338.hashLisp.jproto.Utilities.*;

public class App {
    private final HonsHeap heap;

    public boolean dumpHeap = false;

    public App() {
        heap = new HonsHeap();
    }

    public String getGreeting() {
        return "jproto --- prototype for HashLisp";
    }

    public void forceCollision() {
        HonsCell cell = new HonsCell(HonsValue.fromSmallInt(5), HonsValue.nil);
        System.out.println("Can we force a collision?");

        collision:
        for (int i = 0; i < HonsValue.SMALLINT_MAX; i++) {
            if (i == 5) continue collision;
            HonsCell test = new HonsCell(HonsValue.fromSmallInt(i), HonsValue.nil);
            if (test.getObjectHash() == cell.getObjectHash()) {
                System.out.println(cell);
                System.out.println(test);
                System.out.println(new HonsCell(HonsValue.fromSmallInt(5+1), HonsValue.nil));
                System.out.println(new HonsCell(HonsValue.fromSmallInt(i+1), HonsValue.nil));

                var heaped = heap.cons(HonsValue.fromSmallInt(i), HonsValue.nil);
                System.out.println(heaped);

                System.out.println(heap.cons(HonsValue.fromSmallInt(5), HonsValue.nil));
                System.out.println(heap.cons(HonsValue.fromSmallInt(i), HonsValue.nil));
                break collision;
            }
        }
    }

    public void demo() {
        System.out.printf("nil:             %s%n", HonsValue.nil);
        System.out.printf("symbolTag:       %s%n", HonsValue.symbolTag);
        System.out.printf("small int -17:   %s%n", HonsValue.fromSmallInt(-17));
        System.out.printf("object hash -19: %s%n", HonsValue.fromObjectHash(-19));
        System.out.println();

        HonsCell cell = new HonsCell(HonsValue.fromSmallInt(5), HonsValue.nil);
        System.out.printf("cell: %s%n", cell);

        HonsValue val = heap.cons(HonsValue.fromSmallInt(5), HonsValue.nil);
        System.out.printf("hons: %s%n", val);
        System.out.printf("      %s%n", heap.valueToString(val));

        System.out.print("again: ");
        System.out.println(heap.cons(HonsValue.fromSmallInt(5), HonsValue.nil));
        System.out.println();

        System.out.print("pair: ");
        System.out.println(heap.valueToString(heap.cons(
                HonsValue.fromSmallInt(HonsValue.SMALLINT_MIN),
                HonsValue.fromSmallInt(HonsValue.SMALLINT_MAX)
            )));

        var list = intList(heap, new int[]{1, 2, 3, 4, 5});
        System.out.print("list: ");
        System.out.println(heap.valueToString(list));
        System.out.println();

        System.out.printf("sum: %s%n", sumList(heap, list));
        System.out.println();
        
        System.out.printf("symbol: %s%n", heap.valueToString(heap.makeSymbol("example")));
        System.out.println();

        forceCollision();
    }

    public void run() {
        //demo();
        //System.out.println();
        //LazyEvaluator.demo(heap);
        var filename = Paths.get("/Users/bsmith/postclan/week_0x1f/HashLisp/ex/fibonacci.hl");
        try {
            var contents = Files.readString(filename, StandardCharsets.UTF_8);
//            System.out.println(contents);

            var reader = new Reader(heap, Tokeniser.getFactory(new CharClassifier()));
            var evaluator = new LazyEvaluator(heap);

            var result = reader.read(contents);
            System.out.printf("result = %s%n", result);
            
            // XXX: result is really awkward to use
            // XXX: error reporting of line/col of error!
            if (result.getValue().isPresent()) {
                System.out.println(heap.valueToString(result.getValue().get()));
                
                evaluator.setDebug(true);
                var retval = evaluator.eval(result.getValue().get());
                System.out.printf("result = %s%n", heap.valueToString(retval));
            }
        }
        catch (IOException e) {
            System.out.printf("IOException: %s%n", e);
        }

        if (dumpHeap) {
            System.err.printf("%n---%nHeap dump:%n");
            heap.dumpHeap(System.err);
            System.err.printf("---%n");
        }
    }

    public static void main(String[] args) {
        App app = new App();
        System.out.println(app.getGreeting());
        System.out.printf("args: %s%n", (Object) args);
        
        // Parse argument flags here and configure the app object
        app.dumpHeap = true;
        
        // Run the main program/task
        // XXX Inside this we might create a Driver object
        app.run();
    }
}